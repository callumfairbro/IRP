<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function alternative_revisions_theme($existing, $type, $theme, $path) {
    return [
        'alternative_revisions_view_revisions' => [
            'variables' => [
                'data' => NULL,
                'headers' => NULL,
                'nid' => NULL,
            ]
        ],
        'alternative_revisions_view_revision' => [
            'variables' => [
                'data' => NULL,
                'headers' => NULL,
                'timestamp' => NULL,
                'nid' => NULL,
            ]
        ],
        'alternative_revisions_view_deletions' => [
            'variables' => [
                'data' => NULL,
                'headers' => NULL,
            ]
        ],
        'alternative_revisions_view_deletion' => [
            'variables' => [
                'data' => NULL,
                'headers' => NULL,
                'nid' => NULL,
            ]
        ],
        'alternative_revisions_blockchain_integrity' => [
            'variables' => [
                'data' => NULL,
                'headers' => NULL,
            ]
        ]
    ];
}

/**
 * Implements hook_entity_insert().
 */
function alternative_revisions_entity_insert(EntityInterface $entity) {
    if ($entity instanceof NodeInterface) {
        $revisions_manager = \Drupal::service('alternative_revisions.revision_update_manager');
        $original = $entity->original;
        $revisions_manager->checkForRevisions($entity, $original);
    }
}

/**
 * Implements hook_entity_update().
 */
function alternative_revisions_entity_update(EntityInterface $entity) {
    if ($entity instanceof NodeInterface) {
        $revisions_manager = \Drupal::service('alternative_revisions.revision_update_manager');
        $original = $entity->original;
        $revisions_manager->checkForRevisions($entity, $original);

        $nid = $entity->id();
        $last_revision = $entity->getChangedTime();
        $new_data = [];
        
        $database = Database::getConnection();
        $tables = $database->query("SHOW TABLES LIKE :prefix", [':prefix' => "node_alt_revision__%"])->fetchCol();
        
        if ($tables) {
            foreach ($tables as $table) {
                $new_data_query = $database->select($table, 't');
                if ($table == 'node_alt_revision_field_data') {
                    $new_data_query->condition('nid', $nid, '=');
                } else {
                    $new_data_query->condition('entity_id', $nid, '=');
                }
                $new_data_query->condition('revision_date', $last_revision, '=');
                $new_data_query->fields('t');
                $new_data_result = $new_data_query->execute()->fetchAll();
                if ($new_data_result) {
                    $new_data[] = $new_data_result;
                }
            }
        }

        if ($new_data) {
            try {
                Database::setActiveConnection('blockchain');
                $blockchain_database = Database::getConnection();
            } catch (Exception $e) {
                Database::setActiveConnection();
                \Drupal::logger('alternative_revisions')->error($e);
            }

            $blockchain_data_query = $blockchain_database->select('blockchain_data', 'bc');
            $blockchain_data_query->condition('nid', $nid, '=');
            $blockchain_data_query->condition('timestamp', $last_revision, '<');
            $blockchain_data_query->fields('bc', ['hash']);
            $blockchain_data_query->orderBy('timestamp', 'DESC');
            $blockchain_data_query->range(0,1);
            $blockhain_data_results = $blockchain_data_query->execute()->fetchCol();

            if ($blockhain_data_results) {
                $previous_hash = reset($blockhain_data_results);
                $hash_data = [$previous_hash, $new_data];
                $serialized_data = serialize($hash_data);
                $hash = hash('sha256', $serialized_data);
            } else {
                $serialized_data = serialize($new_data);
                $hash = hash('sha256', $serialized_data);
            }

            if (isset($hash)) {
                $insert_query = $blockchain_database->insert('blockchain_data');
                $insert_query->fields([
                    'nid' => $nid,
                    'hash' => $hash,
                    'timestamp' => $last_revision,
                ]);
                $insert_query->execute();
            }
            Database::setActiveConnection();
        }
    }
}

/**
 * Implements hook_entity_field_storage_info_alter().
 */
function alternative_revisions_entity_field_storage_info_alter(&$fields, EntityTypeInterface $entity_type) {
    if ($entity_type->id() == 'node') {
        $database = Database::getConnection();
        $schema = $database->schema();
        $revisions_manager = \Drupal::service('alternative_revisions.table_creation_manager');
        if ($revisions_manager) {
            foreach ($fields as $field_name => $field) {
                $table_name = 'node_alt_revision__' . $field_name;
                if (!$schema->tableExists($table_name)) {
                    $field_type = $field->getType();
                    $revisions_manager->createDatabaseTable($field_name, $field_type, $table_name);
                }
            }
        }
    }
}

/**
 * Implements hook_entity_delete().
 */
function alternative_revisions_entity_delete(EntityInterface $entity) {

    if ($entity instanceof Node) {
        $database = Database::getConnection();
        $nid = $entity->id();
        $node_data_query = $database->select('node_alt_revision_field_data', 'nd');
        $node_data_query->condition('nid', $nid, '=');
        $node_data_query->fields('nd', ['nid', 'type', 'title', 'status', 'created']);
        $result = $node_data_query->execute()->fetchAll();
        if ($result) {
            $object = reset($result);
            $deleted_data_query = $database->insert('node_alt_revision_field_data');
            $deleted_data_query->fields([
                'nid' => $object->nid,
                'type' => $object->type,
                'title' => $object->title,
                'status' => $object->status,
                'created' => $object->created,
                'deleted' => 1,
                'revision_date' => time()
            ]);
            $deleted_data_query->execute();
        }
    }

}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function alternative_revisions_menu_local_tasks_alter(&$data, $route_name) {
    if ($route_name == 'entity.node.canonical') {
        $node = \Drupal::routeMatch()->getParameter('node');
        if ($node instanceof \Drupal\node\NodeInterface) {
            $nid = $node->id();
            $data['tabs'][0]['output'][] = array(
                '#markup' => '<li class="tabs__tab"><a class="tabs__link js-tabs-link" href="/admin/alternative-revisions/' . $nid . '">Alternative Revisions</a></li>',
                '#weight' => 500,
            );
        }
    }
}